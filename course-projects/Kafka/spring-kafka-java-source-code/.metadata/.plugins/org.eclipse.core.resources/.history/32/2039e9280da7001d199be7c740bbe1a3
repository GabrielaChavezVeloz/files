package com.course.kafka;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;

import com.course.kafka.entity.FoodOrder;
import com.course.kafka.entity.SimpleNumber;
import com.course.kafka.producer.FoodOrderProducer;
import com.course.kafka.producer.SimpleNumberProducer;

@SpringBootApplication
@EnableScheduling
public class KafkaCoreProducerApplication implements CommandLineRunner {
	
	//@Autowired
	//private KafkaKeyProducer producer;
	
	//@Autowired
	//private Employee2JsonProducer producer;

	//@Autowired
	//private PurchaseRequestProducer producer;
	
	//@Autowired
	//private PaymentRequestProducer producer;
	
	@Autowired
	private FoodOrderProducer producer;
	
	@Autowired
	private SimpleNumberProducer simpleNumberProducer;
	
	public static void main(String[] args) {
		SpringApplication.run(KafkaCoreProducerApplication.class, args);
	}
	
	@Override
	public void run(String... args) throws Exception {
		//producer.sendHello("Gabriela " + ThreadLocalRandom.current().nextInt());
		
		/*for (int i = 0; i < 10_000; i++) {
			var key = "key-" + (i % 4);
			var value = "value " + i + " with key " + key;
			producer.send(key, value);
			TimeUnit.SECONDS.sleep(1);
		}*/
		
		/*for (int i = 0; i < 5; i++) {
			var emp = new Employee("emp-" + i, "Employee ", LocalDate.now());
			producer.sendMessage(emp);
		}
		
		var pr1 = new PurchaseRequest(5551, "PR-First", 991, "USD");
		var pr2 = new PurchaseRequest(5552, "PR-First", 992, "USD");
		var pr3 = new PurchaseRequest(5553, "PR-First", 993, "USD");
		
		producer.send(pr1);
		producer.send(pr2);
		producer.send(pr3);
		
		producer.send(pr1);
		
		var paymentRequestAlpha_Transaction1 = new PaymentRequest("Pay-Alpha", 551, "USD", "Notes alpha", "Budget reverse");
		var paymentRequestAlpha_Transaction2 = new PaymentRequest("Pay-Alpha", 551, "USD", "Notes alpha", "Approval workflow");
		var paymentRequestAlpha_Transaction3 = new PaymentRequest("Pay-Alpha", 551, "USD", "Notes alpha", "Push notification");
		
		var paymentRequestBeta_Transaction1 = new PaymentRequest("Pay-Beta", 552, "USD", "Notes Beta", "Budget reverse");
		var paymentRequestBeta_Transaction2 = new PaymentRequest("Pay-Beta", 552, "USD", "Notes Beta", "Approval workflow");
		var paymentRequestBeta_Transaction3 = new PaymentRequest("Pay-Beta", 552, "USD", "Notes Beta", "Push notification");

		producer.send(paymentRequestAlpha_Transaction1);
		producer.send(paymentRequestAlpha_Transaction2);
		producer.send(paymentRequestAlpha_Transaction3);
		producer.send(paymentRequestBeta_Transaction1);
		producer.send(paymentRequestAlpha_Transaction2);
		producer.send(paymentRequestAlpha_Transaction3);
		
		producer.send(paymentRequestAlpha_Transaction2);
		producer.send(paymentRequestAlpha_Transaction3);*/
		
		var chickenOrder = new FoodOrder(3, "Chicken");
		var fishOrder = new FoodOrder(10, "Fish");
		var pizzaOrder = new FoodOrder(5, "Pizza");
		
		producer.send(chickenOrder);
		producer.send(fishOrder);
		producer.send(pizzaOrder);
		
		for(int i = 100; i < 103; i++) {
			var simpleNumber = new SimpleNumber(i);
			simpleNumberProducer.send(simpleNumber);
		}
	}

}
